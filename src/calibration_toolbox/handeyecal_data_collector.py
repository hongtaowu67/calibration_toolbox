from __future__ import print_function, division

import os
import time
import urx
import cv2
import numpy as np

import rospy
import tf2_ros
import tf.transformations as transformations
import geometry_msgs.msg
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from cv_bridge import CvBridgeError

from utils import *
from robot import Robot

from calibration_toolbox.srv import *

class HandEyeCalDataCollector(object):
    
    def __init__(self, tcp_host_ip='172.22.22.2', calib_point_num=20, camera='ps'):
        rospy.loginfo("Make sure to roslaunch openni2_launch openni2.launch")
        rospy.loginfo("Make sure to roslaunch ur_modern_driver ur5_bringup.launch robot_ip:=<RobotIPAddress>")
        
        self.tcp_host_ip = tcp_host_ip

        self.robot = None
        self.robot_vel = 0.5
        self.robot_acc = 0.5

        self.markerIncam_pos = None
        self.markerIncam_orn = None
        self.markerIncam_mat = None

        self.calib_point_num = calib_point_num

        self.base_frame_name = "base_link"
        self.ee_frame_name = "ee_link"

        if camera is 'ps':
            self.rgb_raw_topic = "/camera/rgb/image_raw"
        elif camera is 'rs':
            self.rgb_raw_topic = "/camera/color/image_raw"

        self.cv_rgb_img = None
        self.bridge = CvBridge()

        self.rgb_raw_sub = rospy.Subscriber(self.rgb_raw_topic, Image, self.rgb_cb)

        self.tfBuffer = tf2_ros.Buffer()
        self.robot_pose_listener = tf2_ros.TransformListener(self.tfBuffer)

        # Initialize the robot
        self.robot = Robot(self.tcp_host_ip)

        if camera is 'ps':
            self.calib_joint_config = [
                [1.5848643779754639, -2.3117826620685022, 2.192416191101074, -2.4326046148883265, -1.4664114157306116, -1.3159964720355433],
                [1.6061906814575195, -2.3725231329547327, 2.278717041015625, -2.6501596609698694, -1.9501093069659632, -0.9232075850116175],
                [1.5127710103988647, -2.1461427847491663, 2.047347068786621, -2.0072057882892054, -1.1474083105670374, -1.8918140570269983],
                [1.6093350648880005, -1.6003382841693323, 1.8544268608093262, -2.024642292653219, -1.4058683554278772, -2.0814884344684046],
                [1.9956982135772705, -1.6000145117389124, 1.8531088829040527, -2.2786458174334925, -1.6737836042987269, -1.6298158804522913],
                [1.2216843366622925, -1.7141707579242151, 1.8567380905151367, -2.526341740285055, -1.552854363118307, -0.9925444761859339],
                [0.8124784231185913, -1.8866851965533655, 1.8807415962219238, -1.9837945143329065, -0.781198803578512, -1.9969680945025843],
                [0.7328829169273376, -1.905961815510885, 2.03952693939209, -2.223184410725729, -0.578320328389303, -1.7392457167254847],
                [1.116362452507019, -0.9181302229510706, 0.9580998420715332, -1.7226651350604456, -1.4165757338153284, -0.8870580832110804],
                [0.9409298300743103, -0.7662857214557093, 0.8321871757507324, -1.4970820585833948, -1.5347321669207972, -0.5109804312335413],
                [1.1241873502731323, -1.2221797148333948, 0.9573445320129395, -1.7663281599627894, -1.5672224203692835, -1.0324319044696253],
                [1.1241873502731323, -1.6595152060138147, 0.9573564529418945, -1.6080015341388147, -1.409405533467428, -0.8356855551349085],
                [1.049938678741455, -1.4766629377948206, 1.218224048614502, -1.815906826649801, -1.2200911680804651, -0.9119046370135706],
                [1.1238270998001099, -2.7168715635882776, 1.80397367477417, -2.0527499357806605, -1.7323969046222132, -0.8356497923480433],
                [0.3903382122516632, -2.7224271933185022, 1.656764030456543, -1.7060959974872034, -1.0848611036883753, -0.6458032766925257],
                [-0.20875484148134404, -2.9986122290240687, 1.8118910789489746, -1.561530892048971, -1.039863411580221, -0.668243710194723],
                [-0.7273543516742151, -3.01965839067568, 1.3060555458068848, -0.9753792921649378, -1.0939810911761683, -0.6242025534259241],
                [1.3259533643722534, -1.1725085417376917, 1.0310802459716797, -1.8410385290728968, -1.528747860585348, -0.9979379812823694],
                [1.305898904800415, -1.0338032881366175, 1.0054550170898438, -1.7584260145770472, -1.8387201468097132, -0.978041950856344],
                [0.5588952302932739, -1.1854808966266077, 0.8315515518188477, -1.5795348326312464, -1.0547106901751917, -0.6850851217852991],
                [0.7052405476570129, -2.2743566671954554, 1.8000082969665527, -2.0649173895465296, -1.299640957509176, -0.9388726393329065],
                [0.1369033008813858, -2.2721055189715784, 1.7999725341796875, -1.9189160505877894, -0.6999242941485804, -0.9388607184039515],
                [0.1369033008813858, -1.6667054335223597, 1.800032615661621, -1.9188922087298792, -0.7000201384173792, -0.9388487974749964],
                [0.5022180676460266, -1.1797621885882776, 1.2250690460205078, -1.6336916128741663, -0.912271801625387, -0.9388607184039515],    
            ]
        elif camera is 'rs':
            self.calib_joint_config = [
                [1.5554367303848267, -1.8523834387408655, 2.2774243354797363, -3.7214682737933558, -1.5039351622210901, -1.3094776312457483],
                [1.4067484140396118, -1.5895279089557093, 1.9965934753417969, -3.417342011128561, -1.3537591139422815, -1.099020783101217],
                [1.443353533744812, -1.3415840307818812, 1.7183327674865723, -3.141144100819723, -1.4338067213641565, -1.0941670576678675],
                [1.2826035022735596, -1.3415959517108362, 1.7183327674865723, -3.1684988180743616, -1.44706899324526, -0.9957926909076136],
                [1.3384469747543335, -1.196367088948385, 1.5234389305114746, -2.984107796345846, -1.9374378363238733, -0.9766400496112269],
                [0.6679415702819824, -1.2273953596698206, 1.5714058876037598, -2.851640526448385, -1.5783289114581507, -0.35469180742372686],
                [0.719386100769043, -1.5025046507464808, 1.911679744720459, -3.170753304158346, -1.5955527464496058, -0.34204370180238897],
                [0.711875319480896, -1.6214187780963343, 2.030808448791504, -3.1612070242511194, -1.7689159552203577, -0.4241274038897913],
                [0.6063148975372314, -1.9160736242877405, 2.2486538887023926, -2.995594326649801, -2.1069167296039026, -0.20090133348573858],
                [0.8255573511123657, -1.5097797552691858, 1.9166860580444336, -3.1402204672442835, -1.730501953755514, -0.39015323320497686],
                [0.8735530376434326, -1.6566508452044886, 2.1096158027648926, -3.5285709539996546, -1.4425604979144495, -0.6367533842669886],
                [0.8735889792442322, -2.160168472920553, 2.445026397705078, -3.8086026350604456, -1.4425366560565394, -0.6367409865008753],
                [0.9295657873153687, -2.0453818480121058, 2.3969151973724365, -3.872977081929342, -1.4837639967547815, -0.6536672751056116],
                [0.9198342561721802, -2.471076790486471, 2.3969390392303467, -3.679581944142477, -1.483715836201803, -0.6536791960345667],
                [-0.14323980013002569, -2.584184471760885, 2.225832939147949, -3.618009392415182, -0.5994065443622034, -0.02612477937807256],
                [-0.1264255682574671, -2.985299889241354, 2.2825961112976074, -2.7609685103045862, -1.1510160605060022, -0.3471148649798792],
                [1.3655227422714233, -1.6469805876361292, 2.033778667449951, -3.4649413267718714, -1.1510399023639124, -1.1414831320392054],
                [1.4215703010559082, -1.1600983778582972, 1.4548797607421875, -2.7577441374408167, -1.206306282673971, -1.1378276983844202],
                [1.7790777683258057, -1.3528526465045374, 1.7171707153320312, -2.8371713797198694, -1.4128583113299769, -1.3670948187457483],
                [1.8922758102416992, -1.5607884565936487, 1.9691801071166992, -2.8370993773089808, -1.2768271605121058, -1.6390779654132288],
                [1.8922878503799438, -1.9695881048785608, 2.171557903289795, -2.8370755354510706, -1.0200322310077112, -1.709411923085348],
                [1.482587218284607, -1.704632584248678, 1.861098289489746, -2.7987754980670374, -0.8520858923541468, -1.4814499060260218],
                [1.2258487939834595, -1.7046564261065882, 1.8610620498657227, -3.06275445619692, -0.8520496527301233, -1.283868137990133],
                [0.793065071105957, -1.6950939337359827, 1.8610620498657227, -3.2835148016559046, -0.597694222127096, -0.8662985006915491],
                [0.9316297173500061, -1.5139506498919886, 1.686704158782959, -3.0780914465533655, -0.7332304159747522, -0.8613842169391077],
                [1.0078535079956055, -1.3705576101886194, 1.5241217613220215, -2.8809402624713343, -0.8521578947650355, -0.8368123213397425],
            ]

        self.data_dir = None
    
    def rgb_cb(self, msg):
        if msg is None:
            rospy.logwarn("No rgb images recevied!!!")
        
        try:
            self.cv_rgb_img = self.bridge.imgmsg_to_cv2(msg, 'bgr8')
        except CvBridgeError as e:
            rospy.logwarn(str(e))

    def save_to_file(self, save_dir, calib_pt_idx, tool_transformation, chessboard_img):
        robot_pose_file = os.path.join(save_dir, str(calib_pt_idx)  + '_robotpose.txt')
        chessboard_img_file = os.path.join(save_dir, str(calib_pt_idx) + '_img.png')
        
        # Tool pose in robot base frame
        with open(robot_pose_file, 'w') as file1:
            for l in np.reshape(tool_transformation, (16, )).tolist():
                file1.writelines(str(l) + ' ')
        
        cv2.imwrite(chessboard_img_file, chessboard_img)
    
    def collect_data(self,req):
        time.sleep(1)

        rospy.loginfo("Calibration Point Num: {}".format(len(self.calib_joint_config)))

        for i in range(len(self.calib_joint_config)):
            self.robot.move_to_joint(self.calib_joint_config[i], acc=self.robot_acc, vel=self.robot_vel)
            
            time.sleep(1)
            transform_ros = self.tfBuffer.lookup_transform(self.base_frame_name, self.ee_frame_name, rospy.Time(0))

            pos_ros = transform_ros.transform.translation
            quat_ros = transform_ros.transform.rotation

            robot_pos = np.array([pos_ros.x, pos_ros.y, pos_ros.z])
            robot_quat = np.array([quat_ros.w, quat_ros.x, quat_ros.y, quat_ros.z])
            robot_rotm = quat2rotm(robot_quat)
            robot_pose = make_rigid_transformation(robot_pos, robot_rotm)

            self.save_to_file(req.data_dir, i, robot_pose, self.cv_rgb_img)
            
            time.sleep(1)
            rospy.loginfo("Finish collecting at the {}-th pose".format(i))

        rospy.loginfo("Finish collecting data, moving back to home...")
        self.robot.go_home()

    def shutdown(self):
        self.robot.disconnect()

    def run_handeyecal_dta_collect_server(self):
        s = rospy.Service("handeyecal_collect_data", HandEyeCalDataCollect, self.collect_data)

        rospy.loginfo("Ready to collect data for handeye calibration")
        rospy.spin()

        rospy.on_shutdown(self.shutdown)

